"""update request attribute 'user_id' to str

Revision ID: bf30c9906e97
Revises: e329a22cbff6
Create Date: 2025-06-01 19:53:25.058757

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'bf30c9906e97'
down_revision: Union[str, None] = 'e329a22cbff6'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema: Change user_id in requests from UUID to String."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('requests', 'user_id',
               existing_type=postgresql.UUID(as_uuid=True),
               type_=sa.String(), # Considere especificar um tamanho, ex: sa.String(255)
               existing_nullable=True) # Mantém a nulabilidade
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema: Change user_id in requests from String back to UUID."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('requests', 'user_id',
               existing_type=sa.String(),
               type_=postgresql.UUID(as_uuid=True),
               existing_nullable=True, # Mantém a nulabilidade
               # Para PostgreSQL, você precisará de uma cláusula USING para converter String de volta para UUID.
               # Isso assume que as strings na coluna user_id são representações válidas de UUIDs ou NULL.
               postgresql_using='CASE WHEN user_id IS NOT NULL THEN user_id::uuid ELSE NULL END')
    # ### end Alembic commands ###